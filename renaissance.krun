# Krun config file for running the renaissance suite using Krun's
# ExternalSuiteVMDef.
#
# Note that you will have to make the experiment directory world-writable since
# the runner expects to make a temporary directory at runtime. Sadly we can't
# grant only the Krun user this access prior to running the process executions,
# as the pre-execution scripts run before the Krun user is created.

import os
import platform
from krun.vm_defs import ExternalSuiteVMDef

DIR = os.getcwd()

N_EXECUTIONS = 10
ITERATIONS_ALL_VMS = 2000

MAIL_TO = []

# The heap limit must be at least the value passed to to the runner in krun_ext_*.py
HEAP_LIMIT = 1024 * 1024 * 18  # 18 GiB
STACK_LIMIT = 1024 * 16  # 16 MiB

VARIANTS = {
    "default-ext": None,
}

VMS = {
    'graal-ce': {
        'vm_def': ExternalSuiteVMDef(os.path.join(DIR, "krun_ext_graal_ce.py")),
        'variants': ['default-ext'],
        'n_iterations': ITERATIONS_ALL_VMS,
    },
    'graal-ce-hotspot': {
        'vm_def': ExternalSuiteVMDef(os.path.join(DIR, "krun_ext_graal_ce_hotspot.py")),
        'variants': ['default-ext'],
        'n_iterations': ITERATIONS_ALL_VMS,
    },
    'openj9': {
        'vm_def': ExternalSuiteVMDef(os.path.join(DIR, "krun_ext_openj9.py")),
        'variants': ['default-ext'],
        'n_iterations': ITERATIONS_ALL_VMS,
    },
}

# Benchmark parameters unused in this experiment, so set them all zero.
BENCHMARKS = {
    "akka-uct": 0,
    "als": 0,
    "chi-square": 0,
    "db-shootout": 0,
    "dec-tree": 0,
    "dotty": 0,
    "dummy": 0,
    "finagle-chirper": 0,
    "finagle-http": 0,
    "fj-kmeans": 0,
    "future-genetic": 0,
    "gauss-mix": 0,
    "log-regression": 0,
    "mnemonics": 0,
    "movie-lens": 0,
    "naive-bayes": 0,
    "neo4j-analytics": 0,
    "page-rank": 0,
    "par-mnemonics": 0,
    "philosophers": 0,
    "reactors": 0,
    "rx-scrabble": 0,
    "scala-kmeans": 0,
    "scala-stm-bench7": 0,
    "scrabble": 0,
}

SKIP = [
    # === Always Skip ===
    # The dummy benchmark isn't a real benchmark, so we skip this.
    "dummy:*:default-ext",
    # We skip the finagle benchmarks because they involve networking and
    # finagle-chirper doesn't work when the network interface is disabled.
    # https://github.com/renaissance-benchmarks/renaissance/issues/188
    "finagle-chirper:*:default-ext",
    "finagle-http:*:default-ext",

    # === Skip on OpenJ9 ===
    # null ptr exception in teardown.
    "db-shootout:openj9:default-ext",

    # Runs out of heap -- same as Graal.
    "movie-lens:openj9:default-ext",

    # === Skip on Graal ===
    # Runs out of heap:
    # https://github.com/renaissance-benchmarks/renaissance/issues/187
    "movie-lens:graal-ce:default-ext",
    "movie-lens:graal-ce-hotspot:default-ext",
    # Errors in teardown:
    # https://github.com/renaissance-benchmarks/renaissance/issues/189
    "page-rank:graal-ce:default-ext",
    "page-rank:graal-ce-hotspot:default-ext",
]

# Pre/post commands for a Debian 9 system using postfix for sending mail.
# Make sure the interfaces you want to be taken down are marked `auto` in
# /etc/networking/interfaces otherwise ifup won't work.
PING_HOST = "bencher8.soft-dev.org"
PRE_EXECUTION_CMDS = [
    "while true; do sudo ifdown -a; sleep 5; ping -q -c 10 %s || break; done" % PING_HOST,
    "sudo systemctl stop cron",
    "sudo systemctl stop postfix",
    "sudo systemctl stop systemd-tmpfiles-clean.timer",
    "sudo systemctl stop ssh",
]

POST_EXECUTION_CMDS = [
    "while true; do ping -c 3 -q %s && break; sudo ifdown -a; sleep 5; sudo ifup -a; done" % PING_HOST,
    "sudo systemctl start ssh || true",
    "sudo systemctl start cron || true",
    "sudo systemctl start postfix || true",
    "sudo systemctl start systemd-tmpfiles-clean.timer || true",
]

# Stop cookie and result copy-off.
HOSTNAME = platform.node().split(".")[0]
REMOTE_LOGIN = "vext01@bencher8.soft-dev.org"
REMOTE_DIR = "research/krun_results/"
COOKIE_PATH = os.path.join(REMOTE_DIR, HOSTNAME + ".stop")
SSH_BATCH = "ssh -o 'BatchMode yes' -i id_rsa"

SCP_CMD = ("tar czf - ${KRUN_RESULTS_FILE} ${KRUN_LOG_FILE} ${KRUN_MANIFEST_FILE} | "
           "%s %s 'cat > %s/%s.tgz'" %
           (SSH_BATCH, REMOTE_LOGIN, REMOTE_DIR, HOSTNAME))
POST_EXECUTION_CMDS.append(
    "%s || ( sleep 2; %s ) || true " % (SCP_CMD, SCP_CMD))

# Crash if the "stop cookie" exists on the remote host.
# Allows us to stop machines with no remote management.
POST_EXECUTION_CMDS.append("{0} {1} ls {2} 2> /dev/null | grep {2}; exit $((! $?))".format(
    SSH_BATCH, REMOTE_LOGIN, COOKIE_PATH))
